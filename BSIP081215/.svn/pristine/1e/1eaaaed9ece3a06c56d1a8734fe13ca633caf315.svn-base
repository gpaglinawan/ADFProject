package com.fda.aps.model.appmodule;

import com.fda.aps.AAPEmailNotification;
import com.fda.aps.ADFUtils;
import com.fda.aps.model.AAPModelUtils;
import com.fda.aps.model.appmodule.common.APSApplicationModule;

import com.fda.aps.model.viewobject.AapSlaCutoffdateVOImpl;

import com.fda.aps.model.viewobject.ApsReferenceViewImpl;
import com.fda.aps.model.viewobject.CenterItemNoROVOImpl;
import com.fda.aps.model.viewobject.RequestsViewImpl;

import java.security.Principal;

import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Calendar;

import java.util.List;

import oracle.adf.share.ADFContext;

import oracle.adf.share.security.SecurityContext;

import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.common.JboCompOper;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.AttributeListImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 17 18:40:02 EDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class APSApplicationModuleImpl extends ApplicationModuleImpl implements APSApplicationModule {
    /**
     * This is the default constructor (do not remove).
     */
    public APSApplicationModuleImpl() {
    }

    /**
     * Container's getter for ApsReferenceView.
     * @return ApsReferenceView
     */
    public ViewObjectImpl getApsReferenceView() {
        return (ViewObjectImpl)findViewObject("ApsReferenceView");
    }

    /**
     * Container's getter for RequestsView.
     * @return RequestsView
     */
    public ViewObjectImpl getRequestsView() {
        return (ViewObjectImpl)findViewObject("RequestsView");
    }

    /**
     * Container's getter for SubmittedRequestsView.
     * @return SubmittedRequestsView
     */
    public ViewObjectImpl getSubmittedRequestsView() {
        return (ViewObjectImpl)findViewObject("SubmittedRequestsView");
    }

    /**
     * Container's getter for InProgressRequestsView.
     * @return InProgressRequestsView
     */
    public ViewObjectImpl getInProgressRequestsView() {
        return (ViewObjectImpl)findViewObject("InProgressRequestsView");
    }

    public void initializeSubmitandInprogressRequest() {

        ViewObjectImpl submittedRequestView = getSubmittedRequestsView();
        ViewCriteria submitCriteria =
            submittedRequestView.getViewCriteria("submittedRequestCriteria");
        submittedRequestView.applyViewCriteria(submitCriteria);
        submittedRequestView.setNamedWhereClauseParam("bind_Center",
                                                      AAPModelUtils.deriveCenterFromRole());
        submittedRequestView.executeQuery();

        ViewObjectImpl inProgressRequestView = getInProgressRequestsView();
        ViewCriteria inProgressRequestCriteria =
            inProgressRequestView.getViewCriteria("inprogressRequestCriteria");
        inProgressRequestView.applyViewCriteria(inProgressRequestCriteria);
        inProgressRequestView.setNamedWhereClauseParam("bind_Center",
                                                       AAPModelUtils.deriveCenterFromRole());
        inProgressRequestView.executeQuery();

        ViewObjectImpl centerReferenceView = getCenterReferenceView();
        ViewCriteria centerViewCriteria =
            centerReferenceView.getViewCriteria("ByRefType");
        centerReferenceView.applyViewCriteria(centerViewCriteria);
        centerReferenceView.setNamedWhereClauseParam("bind_RefType", "LMC");
        centerReferenceView.executeQuery();
    }

    public void initializeNotification(String user) {
        //        ViewObjectImpl notificationView = getCenterItemNoROVO();
        //        String[] roles =
        //            ADFContext.getCurrent().getSecurityContext().getUserRoles();
        //        for (String role : roles) {
        //            ViewCriteria notificationCriteria =
        //                notificationView.getViewCriteria("QueryByGroup");
        //            notificationView.applyViewCriteria(notificationCriteria);
        //            notificationView.setNamedWhereClauseParam("bind_group", role);
        //            notificationView.executeQuery();
        //            Row row = notificationView.first();
        //            if (row != null) {
        //                break;
        //            }
        //        }
        //        initializeDashboard(user);
        refreshDashboard(user);
        //        if (ADFContext.getCurrent().getSecurityContext().isUserInRole("AAPBUDGETCREATE")) {
        //
        //            ViewObjectImpl submittedRequestView = getSubmittedRequestsView();
        //            ViewCriteria submitCriteria =
        //                submittedRequestView.getViewCriteria("BySubmitFlag");
        //            submittedRequestView.applyViewCriteria(submitCriteria);
        //            submittedRequestView.setNamedWhereClauseParam("bind_submitFlag",
        //                                                          "Y");
        //            submittedRequestView.executeQuery();
        //        }
    }


    /**
     * Container's getter for CenterReferenceView.
     * @return CenterReferenceView
     */
    public ViewObjectImpl getCenterReferenceView() {
        return (ViewObjectImpl)findViewObject("CenterReferenceView");
    }

    /**
     * Container's getter for APSSearchView.
     * @return APSSearchView
     */
    public ViewObjectImpl getAPSSearchView() {
        return (ViewObjectImpl)findViewObject("APSSearchView");
    }


    /**
     * Container's getter for CANSearch.
     * @return CANSearch
     */
    public ViewObjectImpl getCANSearch() {
        return (ViewObjectImpl)findViewObject("CANSearch");
    }

    public void createNewRequest(String centerCode, String actionType,
                                 String fiscalYear) {

        ViewObjectImpl request =
            (ViewObjectImpl)findViewObject("SubmittedRequestsView");
        Row newRow = request.createRow();
        //String sequence = (String)newRow.getAttribute("RequestSequence");
        SequenceImpl seq = new SequenceImpl("REQUEST_SEQ", getDBTransaction());
        Number reqNo = seq.getSequenceNumber();
        String centerlineItemNo =
            centerCode + "-" + fiscalYear.substring(2) + "-" + actionType +
            "-" + reqNo.toString();
        newRow.setAttribute("CtrLnItmNo", centerlineItemNo);
        newRow.setAttribute("RequestId", reqNo);
        newRow.setAttribute("FiscalYear", fiscalYear);
        newRow.setAttribute("CenterId", AAPModelUtils.getCenterFromRole());
        request.insertRow(newRow);

    }

    /**
     * Container's getter for ApprovalSetupView.
     * @return ApprovalSetupView
     */
    public ViewObjectImpl getApprovalSetupView() {
        return (ViewObjectImpl)findViewObject("ApprovalSetupView");
    }

    /**
     * Container's getter for YesNoView.
     * @return YesNoView
     */
    public ViewObjectImpl getYesNoView() {
        return (ViewObjectImpl)findViewObject("YesNoView");
    }


    /**
     * Container's getter for PointOfContactView.
     * @return PointOfContactView
     */
    public ViewObjectImpl getPointOfContactView() {
        return (ViewObjectImpl)findViewObject("PointOfContactView");
    }

    /**
     * Container's getter for RequestToPOCViewLink.
     * @return RequestToPOCViewLink
     */
    public ViewLinkImpl getRequestToPOCViewLink() {
        return (ViewLinkImpl)findViewLink("RequestToPOCViewLink");
    }

    /**
     * Container's getter for CenterItemViewRO.
     * @return CenterItemViewRO
     */
    public ViewObjectImpl getCenterItemViewRO() {
        return (ViewObjectImpl)findViewObject("CenterItemViewRO");
    }

    /**
     * Container's getter for ActionTypeViewRO.
     * @return ActionTypeViewRO
     */
    public ViewObjectImpl getActionTypeViewRO() {
        return (ViewObjectImpl)findViewObject("ActionTypeViewRO");
    }

    /**
     * Container's getter for FiscalYearRO.
     * @return FiscalYearRO
     */
    public ViewObjectImpl getFiscalYearRO() {
        return (ViewObjectImpl)findViewObject("FiscalYearRO");
    }


    /**
     * Container's getter for AapNotificationView.
     * @return AapNotificationView
     */
    public ViewObjectImpl getAapNotificationView() {
        return (ViewObjectImpl)findViewObject("AapNotificationView");
    }

    /**
     * Container's getter for RequestToNotificationViewLink1.
     * @return RequestToNotificationViewLink1
     */
    public ViewLinkImpl getRequestToNotificationViewLink1() {
        return (ViewLinkImpl)findViewLink("RequestToNotificationViewLink1");
    }


    /**
     * Container's getter for DetailedExpensesView.
     * @return DetailedExpensesView
     */
    public ViewObjectImpl getDetailedExpensesView() {
        return (ViewObjectImpl)findViewObject("DetailedExpensesView");
    }

    /**
     * Container's getter for RequestToDetailedExpenses1.
     * @return RequestToDetailedExpenses1
     */
    public ViewLinkImpl getRequestToDetailedExpenses1() {
        return (ViewLinkImpl)findViewLink("RequestToDetailedExpenses1");
    }

    /**
     * Container's getter for InProcessRequests.
     * @return InProcessRequests
     */
    public ViewObjectImpl getInProcessRequests() {
        return (ViewObjectImpl)findViewObject("InProcessRequests");
    }

    /**
     * Container's getter for AapNotificationVO.
     * @return AapNotificationVO
     */
    public ViewObjectImpl getAapNotificationVO() {
        return (ViewObjectImpl)findViewObject("AapNotificationVO");
    }

    /**
     * Container's getter for SecurityGroupsMappingROView.
     * @return SecurityGroupsMappingROView
     */
    public ViewObjectImpl getSecurityGroupsMappingROView() {
        return (ViewObjectImpl)findViewObject("SecurityGroupsMappingROView");
    }

    public void executeSubmittedRequest(String requestId) {
        ViewObjectImpl submittedRequestsView = getSubmittedRequestsView();
        ViewCriteria requestIdCriteria =
            submittedRequestsView.getViewCriteria("ByRequestId");
        submittedRequestsView.applyViewCriteria(requestIdCriteria);
        submittedRequestsView.setNamedWhereClauseParam("bind_RequestId",
                                                       requestId);
        submittedRequestsView.executeQuery();

    }

    /**
     * Container's getter for CenterItemROVO.
     * @return CenterItemROVO
     */
    public ViewObjectImpl getCenterItemROVO() {
        return (ViewObjectImpl)findViewObject("CenterItemROVO");
    }

    public void approveAcquisitionRequest(String centerItemNo,
                                          String requestId) {

        ADFContext ctx = ADFContext.getCurrent();
        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        ViewCriteria criteria =
            aapNotificationView.getViewCriteria("byRequestId");
        aapNotificationView.applyViewCriteria(criteria);
        aapNotificationView.setNamedWhereClauseParam("bind_RequestId",
                                                     requestId);
        aapNotificationView.executeQuery();

        Row newNotificationRow = aapNotificationView.first();
        //Row newNotificationRow = aapNotificationView.createRow();
        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);

        //        String[] roles = ctx.getSecurityContext().getUserRoles();
        //        ViewObjectImpl securityMappingView =
        //            this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_AcquisitionGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("BudgetGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }

        List<String> epRoles = ADFUtils.getLoginUserEPRoles();
        for (String role : epRoles) {
            if (role.contains("ACQ_APRV")) {
                String budUser = AAPModelUtils.getBudgetUserFromRole(role);
                newNotificationRow.setAttribute("SubmittedTo", budUser);
            }
        }
        newNotificationRow.setAttribute("WfStatus", "ACQUSITION_APPROVED");

        getDBTransaction().commit();
        List<String> recipients = new ArrayList<String>();
        String senderEmail = AAPModelUtils.getEmail();
        if (senderEmail != null) {
            recipients.add(senderEmail);
        }
        String mailDistro = getAcqnApproverMailDistro();
        if (mailDistro != null) {
            recipients.add(mailDistro);
        }
        List<String> pocEmail = getPOCEmail(requestId);
        if (pocEmail.size() > 0) {
            for (String poc : pocEmail) {
                recipients.add(poc);
            }
        }

        AAPEmailNotification.getInstance().sendMessage(recipients,
                                                       "New request has been approved",
                                                       senderEmail,
                                                       centerItemNo +
                                                       " NEW ACQUISITION REQUEST HAS BEEN APPROVED");
    }

    private String getAcqnApproverMailDistro() {
        String email = null;
        String center = AAPModelUtils.getCenterFromRole();
        if (center != null) {
            email = center + "-ACQ-APRVR@fda.hhs.gov";
        }
        return email;
    }

    private String getBudgetApproverMailDistro() {
        String email = null;
        String center = AAPModelUtils.getCenterFromRole();
        if (center != null) {
            email = center + "-BDGT_APRVR@fda.hhs.gov";
        }
        return email;
    }

    private String getOAGSBudgetApproverMailDistro() {
        String email = null;
        String center = AAPModelUtils.getCenterFromRole();
        if (center != null) {
            email = center + "-BDGT_APRVR@fda.hhs.gov";
        }
        return email;
    }

    private String getOAGSACQNApproverMailDistro() {
        String email = null;
        String center = AAPModelUtils.getCenterFromRole();
        if (center != null) {
            email = center + "-ACQ-APRVR@fda.hhs.gov";
        }
        return email;
    }

    public void approveBudgetRequest(String centerItemNo, String requestId) {

        //        ADFContext ctx = ADFContext.getCurrent();
        //        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        //        Row newNotificationRow = aapNotificationView.createRow();
        //        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        //        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);
        //
        //        String[] roles = ctx.getSecurityContext().getUserRoles();
        //        ViewObjectImpl securityMappingView =
        //            this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("AcquisitionGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }
        //
        //        newNotificationRow.setAttribute("WfStatus", "BUDGET_APPROVED");
        //        aapNotificationView.insertRow(newNotificationRow);
        //
        //        newNotificationRow = aapNotificationView.createRow();
        //        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        //        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);
        //
        //        roles = ctx.getSecurityContext().getUserRoles();
        //        securityMappingView = this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("BudgetGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }
        //
        //        newNotificationRow.setAttribute("WfStatus", "BUDGET_APPROVED");
        //        aapNotificationView.insertRow(newNotificationRow);
        //        getDBTransaction().commit();


        ADFContext ctx = ADFContext.getCurrent();
        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        ViewCriteria criteria =
            aapNotificationView.getViewCriteria("byRequestId");
        aapNotificationView.appendViewCriteria(criteria);
        aapNotificationView.setNamedWhereClauseParam("bind_RequestId",
                                                     requestId);
        aapNotificationView.executeQuery();

        Row newNotificationRow = aapNotificationView.first();
        //Row newNotificationRow = aapNotificationView.createRow();
        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);
        //
        //        String[] roles = ctx.getSecurityContext().getUserRoles();
        //        ViewObjectImpl securityMappingView =
        //            this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("BudgetGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }

        List<String> epRoles = ADFUtils.getLoginUserEPRoles();
        for (String role : epRoles) {
            if (role.contains("BDGT_APRV")) {
                newNotificationRow.setAttribute("SubmittedTo", role);
            }

        }

        newNotificationRow.setAttribute("WfStatus", "BUDGET_APPROVED");

        getDBTransaction().commit();
        List<String> recipients = new ArrayList<String>();
        String senderEmail = AAPModelUtils.getEmail();
        if (senderEmail != null) {
            recipients.add(senderEmail);
        }

        String oagsAcqnApproverEmail = getOAGSACQNApproverMailDistro();
        if (oagsAcqnApproverEmail != null) {
            recipients.add(oagsAcqnApproverEmail);
        }

        String oagsBudgetApproverEmail = getOAGSBudgetApproverMailDistro();
        if (oagsBudgetApproverEmail != null) {
            recipients.add(oagsBudgetApproverEmail);
        }

        List<String> pocEmail = getPOCEmail(requestId);
        if (pocEmail.size() > 0) {
            for (String poc : pocEmail) {
                recipients.add(poc);
            }
        }

        AAPEmailNotification.getInstance().sendMessage(recipients,
                                                       "New budget request has been approved",
                                                       senderEmail,
                                                       centerItemNo +
                                                       " NEW BUDGET REQUEST HAS BEEN APPROVED");
    }

    public void rejectAquisitionLeadRequest(String centerItemNo,
                                            String requestId) {
        ADFContext ctx = ADFContext.getCurrent();
        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        ViewCriteria criteria =
            aapNotificationView.getViewCriteria("byRequestId");
        aapNotificationView.applyViewCriteria(criteria);
        aapNotificationView.setNamedWhereClauseParam("bind_RequestId",
                                                     requestId);
        aapNotificationView.executeQuery();

        Row newNotificationRow = aapNotificationView.first();
        //Row newNotificationRow = aapNotificationView.createRow();
        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);

        //        String[] roles = ctx.getSecurityContext().getUserRoles();
        //        ViewObjectImpl securityMappingView =
        //            this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("AcquisitionGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }

        List<String> epRoles = ADFUtils.getLoginUserEPRoles();

        for (String role : epRoles) {
            if (role.contains("BUD")) {
                String acqnLeadGroup =
                    AAPModelUtils.getAcqnLeadGroupFromRole(role);
                newNotificationRow.setAttribute("SubmittedTo", acqnLeadGroup);
            }
        }
        newNotificationRow.setAttribute("WfStatus", "REJECTED");

        getDBTransaction().commit();

        List<String> recipients = new ArrayList<String>();
        String senderEmail = AAPModelUtils.getEmail();
        if (senderEmail != null) {
            recipients.add(senderEmail);
        }
        List<String> pocEmail = getPOCEmail(requestId);
        if (pocEmail.size() > 0) {
            for (String poc : pocEmail) {
                recipients.add(poc);
            }
        }
        AAPEmailNotification.getInstance().sendMessage(recipients,
                                                       "New acquisition request has been rejected",
                                                       senderEmail,
                                                       centerItemNo +
                                                       ": NEW ACQUISITION REQUEST HAS BEEN REJECTED");

    }

    public void submitBudgetRequest(String centerItemNo, String requestId) {

        //        ADFContext ctx = ADFContext.getCurrent();
        //        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        //        Row newNotificationRow = aapNotificationView.createRow();
        //        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        //        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);
        //
        //        String[] roles = ctx.getSecurityContext().getUserRoles();
        //        ViewObjectImpl securityMappingView =
        //            this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("BudgetGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }
        //
        //        newNotificationRow.setAttribute("WfStatus", "BUDGET_USER_SUBMITTED");
        //        aapNotificationView.insertRow(newNotificationRow);
        //        getDBTransaction().commit();


        ADFContext ctx = ADFContext.getCurrent();
        SecurityContext secCtx = ctx.getSecurityContext();
        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        ViewCriteria criteria =
            aapNotificationView.getViewCriteria("byRequestId");
        aapNotificationView.applyViewCriteria(criteria);
        aapNotificationView.setNamedWhereClauseParam("bind_RequestId",
                                                     requestId);
        aapNotificationView.executeQuery();

        Row newNotificationRow = aapNotificationView.first();
        //Row newNotificationRow = aapNotificationView.createRow();
        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);

        //        String[] roles = ctx.getSecurityContext().getUserRoles();
        //        ViewObjectImpl securityMappingView =
        //            this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("BudgetGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }

        List<String> epRoles = ADFUtils.getLoginUserEPRoles();

        for (String role : epRoles) {
            if (role.contains("BUD_USER")) {
                String budGroup = AAPModelUtils.getBudgetLeadFromRole(role);
                newNotificationRow.setAttribute("SubmittedTo", budGroup);
            }
        }
        if (secCtx.isUserInRole("AAPBUDGETCREATE")) {
            newNotificationRow.setAttribute("WfStatus",
                                            "BUDGET_USER_SUBMITTED");
//            if (secCtx.isUserInRole("AAPBUDGETAPPROVE")) {
//                newNotificationRow.setAttribute("WfStatus", "BUDGET_APPROVED");
//            }


        }


        getDBTransaction().commit();
        List<String> recipients = new ArrayList<String>();
        String senderEmail = AAPModelUtils.getEmail();
        if (senderEmail != null) {
            recipients.add(senderEmail);
        }

        if (secCtx.isUserInRole("AAPBUDGETCREATE")) {
            newNotificationRow.setAttribute("WfStatus",
                                            "BUDGET_USER_SUBMITTED");
//            if (secCtx.isUserInRole("AAPBUDGETAPPROVE")) {
//                String oagsAcqnApproverEmail = getOAGSACQNApproverMailDistro();
//                if (oagsAcqnApproverEmail != null) {
//                    recipients.add(oagsAcqnApproverEmail);
//                }
//
//                String oagsBudgetApproverEmail =
//                    getOAGSBudgetApproverMailDistro();
//                if (oagsBudgetApproverEmail != null) {
//                    recipients.add(oagsBudgetApproverEmail);
//                }
//                List<String> pocEmail = getPOCEmail(requestId);
//                if (pocEmail.size() > 0) {
//                    for (String poc : pocEmail) {
//                        recipients.add(poc);
//                    }
//                }
//                AAPEmailNotification.getInstance().sendMessage(recipients,
//                                                               "New budget request has been approved",
//                                                               senderEmail,
//                                                               centerItemNo +
//                                                               " NEW BUDGET REQUEST HAS BEEN APPROVED");
//                return;
//            }
            String mailDistro = getBudgetApproverMailDistro();
            if (mailDistro != null) {
                recipients.add(mailDistro);
            }
            List<String> pocEmail = getPOCEmail(requestId);
            if (pocEmail.size() > 0) {
                for (String poc : pocEmail) {
                    recipients.add(poc);
                }
            }
            AAPEmailNotification.getInstance().sendMessage(recipients,
                                                           "New budget request has been submitted",
                                                           senderEmail,
                                                           centerItemNo +
                                                           " NEW BUDGET REQUEST HAS BEEN SUBMITTED");
        }

    }

    public void rejectAcquisitionRequest(String centerItemNo,
                                         String requestId) {

        //        ADFContext ctx = ADFContext.getCurrent();
        //        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        //        Row newNotificationRow = aapNotificationView.createRow();
        //        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        //        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);
        //
        //        String[] roles = ctx.getSecurityContext().getUserRoles();
        //        ViewObjectImpl securityMappingView =
        //            this.getSecurityGroupsMappingROView();
        //
        //
        //        for (String role : roles) {
        //            securityMappingView.setNamedWhereClauseParam("bind_AcquisitionGroup",
        //                                                         role);
        //            securityMappingView.executeQuery();
        //            Row securityMappingRow = securityMappingView.first();
        //            if (securityMappingRow != null) {
        //                String groupName =
        //                    (String)securityMappingRow.getAttribute("BudgetGroupName");
        //                newNotificationRow.setAttribute("SubmittedTo", groupName);
        //            }
        //        }
        //
        //        newNotificationRow.setAttribute("WfStatus", "ACQUSITION_REJECT");
        //        aapNotificationView.insertRow(newNotificationRow);
        //        getDBTransaction().commit();
        ADFContext ctx = ADFContext.getCurrent();
        ViewObjectImpl aapNotificationView = getAapNotificationVO();
        ViewCriteria criteria =
            aapNotificationView.getViewCriteria("byRequestId");
        aapNotificationView.applyViewCriteria(criteria);
        aapNotificationView.setNamedWhereClauseParam("bind_RequestId",
                                                     requestId);
        aapNotificationView.executeQuery();

        Row newNotificationRow = aapNotificationView.first();
        //Row newNotificationRow = aapNotificationView.createRow();
        newNotificationRow.setAttribute("RequestId", requestId);
        //        newNotificationRow.setAttribute("SubmittedFrom",
        //                                        ctx.getSecurityContext().getUserName());
        newNotificationRow.setAttribute("CenterItemNo", centerItemNo);

        String[] roles = ctx.getSecurityContext().getUserRoles();
        ViewObjectImpl securityMappingView =
            this.getSecurityGroupsMappingROView();


        for (String role : roles) {
            securityMappingView.setNamedWhereClauseParam("bind_AcquisitionGroup",
                                                         role);
            securityMappingView.executeQuery();
            Row securityMappingRow = securityMappingView.first();
            if (securityMappingRow != null) {
                String groupName =
                    (String)securityMappingRow.getAttribute("AcquisitionGroupName");
                newNotificationRow.setAttribute("SubmittedTo", groupName);
            }
        }

        List<String> epRoles = ADFUtils.getLoginUserEPRoles();

        for (String role : epRoles) {
            String acqnGroup = AAPModelUtils.getAcqnUserFromRole(role);
            newNotificationRow.setAttribute("SubmittedTo", acqnGroup);
        }

        newNotificationRow.setAttribute("WfStatus", "REJECTED");

        getDBTransaction().commit();

        List<String> recipients = new ArrayList<String>();
        String senderEmail = AAPModelUtils.getEmail();
        if (senderEmail != null) {
            recipients.add(senderEmail);
        }
        List<String> pocEmail = getPOCEmail(requestId);
        if (pocEmail.size() > 0) {
            for (String poc : pocEmail) {
                recipients.add(poc);
            }
        }
        AAPEmailNotification.getInstance().sendMessage(recipients,
                                                       "New acquisition request has been rejected",
                                                       senderEmail,
                                                       centerItemNo +
                                                       " NEW ACQUISITION REQUEST HAS BEEN REJECTED");
    }

    public String isAcquisitionLead(String user) {
        String isAcquisitionLead = "false";
        ADFContext ctx = ADFContext.getCurrent();
        String[] roles = ctx.getSecurityContext().getUserRoles();
        for (Principal p :
             ctx.getSecurityContext().getSubject().getPrincipals()) {
            System.err.println(p.getName());
        }


        ViewObjectImpl securityMappingView =
            this.getSecurityGroupsMappingROView();
        for (String role : roles) {
            securityMappingView.setNamedWhereClauseParam("bind_AcquisitionGroup",
                                                         role);
            securityMappingView.executeQuery();
            Row securityMappingRow = securityMappingView.first();
            if (securityMappingRow != null) {
                String acquisitionLead =
                    (String)securityMappingRow.getAttribute("AcquisitionApprover");
                isAcquisitionLead =
                        acquisitionLead.equalsIgnoreCase(user) ? "true" :
                        "false";
                break;
            }

        }
        return isAcquisitionLead;
    }

    public boolean isBudgetLead(String user) {
        boolean isBudgetLead = false;
        ADFContext ctx = ADFContext.getCurrent();
        String[] roles = ctx.getSecurityContext().getUserRoles();
        ViewObjectImpl securityMappingView =
            this.getSecurityGroupsMappingROView();
        for (String role : roles) {
            securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
                                                         role);
            securityMappingView.executeQuery();
            Row securityMappingRow = securityMappingView.first();
            if (securityMappingRow != null) {
                String budgetLead =
                    (String)securityMappingRow.getAttribute("BudgetApprover");

                isBudgetLead = user.equalsIgnoreCase(budgetLead);
                break;
            }

        }
        return isBudgetLead;
    }

    /**
     * Container's getter for CenterItemNoROVO.
     * @return CenterItemNoROVO
     */
    public ViewObjectImpl getCenterItemNoROVO() {
        return (ViewObjectImpl)findViewObject("CenterItemNoROVO");
    }

    public void executeRequestToZeroRecords() {
        ViewObjectImpl requestView = getSubmittedRequestsView();
        ViewCriteria bySubmitFlag =
            requestView.getViewCriteria("BySubmitFlag");
        requestView.applyViewCriteria(bySubmitFlag);
        requestView.setNamedWhereClauseParam("bind_submitFlag", "Y");
        requestView.executeQuery();
    }

    public void refreshDashboard(String user) {

        ADFContext ctx = ADFContext.getCurrent();
        SecurityContext secContext = ctx.getSecurityContext();
        ViewObjectImpl inProgressVO = getInProgressView();
        ViewCriteria inProgressCriteria =
            inProgressVO.getViewCriteria("InprogressCriteria");
        inProgressVO.applyViewCriteria(inProgressCriteria);
        inProgressVO.setNamedWhereClauseParam("bind_User",
                                              secContext.getUserName());
        inProgressVO.setNamedWhereClauseParam("bind_Center",
                                              AAPModelUtils.deriveCenterFromRole());
        inProgressVO.executeQuery();

        ViewObjectImpl notificationView = getAapNotificationVO();

        ViewCriteria byAcqnUserAndLead =
            notificationView.getViewCriteria("QueryByAcqnUserAndLead");

       

        ViewCriteria byAcqnUserLeadandBudgetUser =
            notificationView.getViewCriteria("QueryByAcqnUserLeadandBudgetUser");
        
       

        ViewCriteria byAcqnBudgetUserandLead =
            notificationView.getViewCriteria("QueryByAcqnBudgetUserandLead");

        if (secContext.isUserInRole("AAPACQNCREATE")) {

            if (secContext.isUserInRole("AAPACQNAPPROVE")) {

                if (secContext.isUserInRole("AAPBUDGETCREATE")) {

                    if (secContext.isUserInRole("AAPBUDGETAPPROVE")) {

                        ViewCriteriaRow collaborationCriteriaRow = createCollaborationCriteria(byAcqnUserLeadandBudgetUser);
                        
                        if (collaborationCriteriaRow != null){
                            collaborationCriteriaRow.setConjunction(ViewCriteriaRow.VC_CONJ_OR);
                            byAcqnBudgetUserandLead.addRow(collaborationCriteriaRow);
                            
                        }
                        notificationView.applyViewCriteria(byAcqnBudgetUserandLead);
                        notificationView.setNamedWhereClauseParam("bind_UserName",
                                                                  ctx.getSecurityContext().getUserName());
                        notificationView.setNamedWhereClauseParam("bind_Center",
                                                                  AAPModelUtils.getCenterFromRole());
                        notificationView.executeQuery();
                        return;

                    }

                    ViewCriteriaRow collaborationCriteriaRow = createCollaborationCriteria(byAcqnUserLeadandBudgetUser);
                    
                    if (collaborationCriteriaRow != null){
                        collaborationCriteriaRow.setConjunction(ViewCriteriaRow.VC_CONJ_OR);
                        byAcqnBudgetUserandLead.addRow(collaborationCriteriaRow);
                        
                    }
                    notificationView.applyViewCriteria(byAcqnUserLeadandBudgetUser);
                    notificationView.setNamedWhereClauseParam("bind_UserName",
                                                              ctx.getSecurityContext().getUserName());
                    notificationView.setNamedWhereClauseParam("bind_Center",
                                                              AAPModelUtils.getCenterFromRole());
                    notificationView.executeQuery();
                    return;
                }
                notificationView.applyViewCriteria(byAcqnUserAndLead);
                notificationView.setNamedWhereClauseParam("bind_UserName",
                                                          ctx.getSecurityContext().getUserName());
                notificationView.setNamedWhereClauseParam("bind_Center",
                                                          AAPModelUtils.getCenterFromRole());
                notificationView.executeQuery();
                return;

            }
            if (secContext.isUserInRole("AAPBUDGETCREATE")) {

                if (secContext.isUserInRole("AAPBUDGETAPPROVE")) {
                    ViewCriteriaRow collaborationCriteriaRow = createCollaborationCriteria(byAcqnBudgetUserandLead);
                    
                    if (collaborationCriteriaRow != null){
                        collaborationCriteriaRow.setConjunction(ViewCriteriaRow.VC_CONJ_OR);
                        byAcqnBudgetUserandLead.addRow(collaborationCriteriaRow);
                        
                    }
                    notificationView.applyViewCriteria(byAcqnBudgetUserandLead);
                    notificationView.setNamedWhereClauseParam("bind_UserName",
                                                              ctx.getSecurityContext().getUserName());
                    notificationView.setNamedWhereClauseParam("bind_Center",
                                                              AAPModelUtils.getCenterFromRole());
                    notificationView.executeQuery();
                    return;

                }
                ViewCriteriaRow collaborationCriteriaRow = createCollaborationCriteria(byAcqnUserLeadandBudgetUser);
                
                if (collaborationCriteriaRow != null){
                    collaborationCriteriaRow.setConjunction(ViewCriteriaRow.VC_CONJ_OR);
                    byAcqnBudgetUserandLead.addRow(collaborationCriteriaRow);
                    
                }
                notificationView.applyViewCriteria(byAcqnUserLeadandBudgetUser);
                notificationView.setNamedWhereClauseParam("bind_UserName",
                                                          ctx.getSecurityContext().getUserName());
                notificationView.setNamedWhereClauseParam("bind_Center",
                                                          AAPModelUtils.getCenterFromRole());
                notificationView.executeQuery();
                return;
            }

            ViewCriteria byUser =
                notificationView.getViewCriteria("QueryBySubmitter");
            notificationView.applyViewCriteria(byUser);
            notificationView.setNamedWhereClauseParam("bind_UserName",
                                                      ctx.getSecurityContext().getUserName());
            notificationView.executeQuery();

        }
        return;

    }

    public void initializeDashboard(String user) {
        ViewObjectImpl notificationView = getAapNotificationVO();
        ViewObjectImpl completedStatusView = getCompletedStatusVO();
        ADFContext ctx = ADFContext.getCurrent();
        SecurityContext secContext = ctx.getSecurityContext();
        String status = null;

        ViewObjectImpl inProgressVO = getInProgressView();
        ViewCriteria inProgressCriteria =
            inProgressVO.getViewCriteria("InprogressCriteria");
        inProgressVO.applyViewCriteria(inProgressCriteria);
        inProgressVO.setNamedWhereClauseParam("bind_User",
                                              secContext.getUserName());
        inProgressVO.executeQuery();

        //if (secContext.isUserInRole("ACQUISITION_GROUP")) {
        if (secContext.isUserInRole("AAPACQNCREATE")) {
            if (secContext.isUserInRole("AAPACQNAPPROVE")) {
                //if (isAcquisitionLead(user).equals("true")) {
                //status = "NEW";

                String[] roles = ctx.getSecurityContext().getUserRoles();
                ViewObjectImpl securityMappingView =
                    this.getSecurityGroupsMappingROView();

                List<String> ecpRoles = AAPModelUtils.getLoginUserEPRoles();

                //for (String role : roles) {
                for (String role : ecpRoles) {
                    if (role.contains("ACQ_USER")) {
                        String acqLeadGroup =
                            AAPModelUtils.getAcqnLeadGroupFromRole(role);
                        //                    securityMappingView.setNamedWhereClauseParam("bind_AcquisitionGroup",
                        //                                                                 role);
                        //                    securityMappingView.executeQuery();
                        //                    Row securityMappingRow = securityMappingView.first();
                        //                    if (securityMappingRow != null) {
                        //                        String groupName =
                        //                            (String)securityMappingRow.getAttribute("BudgetGroupName");
                        //newNotificationRow.setAttribute("SubmittedTo", groupName);
                        // for aquisition user
                        ViewCriteria byGroupAndStatus =
                            notificationView.getViewCriteria("QueryByAcquisitionLeadStatus");
                        notificationView.applyViewCriteria(byGroupAndStatus);
                        notificationView.setNamedWhereClauseParam("bind_AcquisitionGroup",
                                                                  acqLeadGroup);
                        //                        notificationView.setNamedWhereClauseParam("bind_BudgetGroup",
                        //                                                                  groupName);
                        notificationView.executeQuery();
                        Row row = notificationView.first();
                        System.err.println("row " + row);
                        System.err.println("count " +
                                           notificationView.getEstimatedRowCount());
                        return;
                        //                    }
                    }
                }

            } else {
                List<String> ecpRoles = AAPModelUtils.getLoginUserEPRoles();
                String[] roles = ctx.getSecurityContext().getUserRoles();
                ViewObjectImpl securityMappingView =
                    this.getSecurityGroupsMappingROView();

                ViewCriteria byUser =
                    notificationView.getViewCriteria("QueryBySubmitter");
                notificationView.applyViewCriteria(byUser);
                notificationView.setNamedWhereClauseParam("bind_UserName",
                                                          ctx.getSecurityContext().getUserName());
                //                notificationView.setNamedWhereClauseParam("bind_BudgetGroup",
                //                                                          budgetGroup);
                notificationView.executeQuery();

                Row row = notificationView.first();
                System.err.println("row " + row);
                System.err.println("row count " +
                                   notificationView.getEstimatedRowCount());

                //for (String role : roles) {
                /*
                for (String role : ecpRoles) {
                    if (role.contains("ACQ_USER")){
                      String budgetGroup = AAPModelUtils.getAcqnLeadGroupFromRole(role);

                        // for aquisition user
                        ViewCriteria byGroupAndStatus =
                            notificationView.getViewCriteria("QueryByGroupAndStatus");
                        notificationView.applyViewCriteria(byGroupAndStatus);
                        notificationView.setNamedWhereClauseParam("bind_AcquisitionGroup",
                                                                  role);
                        notificationView.setNamedWhereClauseParam("bind_BudgetGroup",
                                                                  budgetGroup);
                        notificationView.executeQuery();

                        Row row = notificationView.first();
                        System.err.println("row " + row);
                        System.err.println("row count " +
                                           notificationView.getEstimatedRowCount());

                        return;
                    }
//                    }
                }
*/

            }
        }
        //if (secContext.isUserInRole("BUDGET_GROUP")) {
        if (secContext.isUserInRole("AAPBUDGETCREATE")) {
            if (secContext.isUserInRole("AAPBUDGETAPPROVE")) {
                status = "BUDGET_USER_SUBMITTED";
            } else {
                status = "ACQUSITION_APPROVED";
            }
        }


        String[] roles =
            ADFContext.getCurrent().getSecurityContext().getUserRoles();
        ViewObjectImpl securityMappingView =
            this.getSecurityGroupsMappingROView();

        List<String> epRoles = ADFUtils.getLoginUserEPRoles();
        //        for (String role : roles) {
        for (String role : epRoles) {
            if (role.contains("BDGT_USER")) {
                //                securityMappingView.setNamedWhereClauseParam("bind_BudgetGroup",
                //                                                             role);
                //                securityMappingView.executeQuery();
                //                Row securityMappingRow = securityMappingView.first();
                //                if (securityMappingRow != null) {


                ViewCriteria notificationCriteria =
                    notificationView.getViewCriteria("QueryByUser");
                notificationView.applyViewCriteria(notificationCriteria);
                //notificationView.setNamedWhereClauseParam("bind_User", role);
                if ("ACQUSITION_APPROVED".equalsIgnoreCase(status)) {
                    //                    notificationView.setNamedWhereClauseParam("bind_User",
                    //                                                              securityMappingRow.getAttribute("AcquisitionGroupName"));
                    notificationView.setNamedWhereClauseParam("bind_User",
                                                              role);
                    //                                                                  securityMappingRow.getAttribute("BudgetGroupName"));
                } else {
                    role = ADFUtils.getBudgetLeadFromRole(role);
                    notificationView.setNamedWhereClauseParam("bind_User",
                                                              role);
                    //securityMappingRow.getAttribute("BudgetGroupName"));
                }
                notificationView.setNamedWhereClauseParam("bind_Status",
                                                          status);
                notificationView.executeQuery();
                Row row = notificationView.first();
                if (row != null) {
                    break;
                }
            }
            //            }
        }

        for (String role : epRoles) {
            ViewCriteria completedStatusCriteria =
                completedStatusView.getViewCriteria("CompletedStatus");
            completedStatusView.applyViewCriteria(completedStatusCriteria);
            completedStatusView.setNamedWhereClauseParam("bind_User", role);
            //notificationView.setNamedWhereClauseParam("bind_Status", status);
            completedStatusView.executeQuery();
            Row row = completedStatusView.first();
            if (row != null) {
                break;
            }
        }


    }

    public void setCenterLineCurrentRow(String requestId) {
        ViewObjectImpl centerItemVO = getCenterItemNoROVO();
        ViewCriteria criteria =
            centerItemVO.getViewCriteria("QueryByRequestId");
        centerItemVO.applyViewCriteria(criteria);
        centerItemVO.setNamedWhereClauseParam("bind_reqId", requestId);
        centerItemVO.executeQuery();

        Row row = centerItemVO.first();

        centerItemVO.setCurrentRow(row);
    }

    /**
     * Container's getter for AapCommodityBranchdivisionROVO.
     * @return AapCommodityBranchdivisionROVO
     */
    public ViewObjectImpl getAapCommodityBranchdivisionROVO() {
        return (ViewObjectImpl)findViewObject("AapCommodityBranchdivisionROVO");
    }

    public void populateBranchDivisionInfo(String commodityType) {
        ViewObjectImpl commodity = getAapCommodityBranchdivisionROVO();
        ViewCriteria criteria = commodity.getViewCriteria("byCommodityType");
        commodity.applyViewCriteria(criteria);
        commodity.setNamedWhereClauseParam("bind_CommodityType",
                                           commodityType);
        commodity.executeQuery();

        Row row = commodity.first();

        ViewObjectImpl requestView = getSubmittedRequestsView();

        Row currentRequestRow = requestView.getCurrentRow();
        currentRequestRow.setAttribute("Branch", row.getAttribute("Branch"));
        currentRequestRow.setAttribute("Division",
                                       row.getAttribute("Division"));
    }

    public void populateDueDate(String sla) {
        ViewObjectImpl requestView = getSubmittedRequestsView();

        Row currentRequestRow = requestView.getCurrentRow();

        Date awardDate =
            (Date)currentRequestRow.getAttribute("RequiredAwardDate");
        if (awardDate != null) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(new java.util.Date(awardDate.timestampValue().getTime()));
            cal.add(Calendar.DATE, (new Integer(sla).intValue()) * -1);
            //            cal.clear(Calendar.HOUR);
            //            cal.clear(Calendar.MINUTE);
            //            cal.clear(Calendar.SECOND);
            //            cal.clear(Calendar.MILLISECOND);
            try {
                Date newDate =
                    dateBeforeNDays(awardDate, new Integer(sla).intValue());
                currentRequestRow.setAttribute("DueDate", newDate);
            } catch (Exception ex) {
                System.err.println(ex.getMessage());
            }
        }


    }

    static final long MILI_SECONDS_PER_DAY = 86400000;

    public static Date dateBeforeNDays(Date startDate, int nDays) {
        if (startDate == null)
            startDate = new Date(Date.getCurrentDate()); // assume today

        Timestamp ts = startDate.timestampValue();
        long nextDatesSecs = ts.getTime() - (MILI_SECONDS_PER_DAY * nDays);
        return new Date(new Timestamp(nextDatesSecs));
    }


    /**
     * Container's getter for CompletedStatusVO.
     * @return CompletedStatusVO
     */
    public ViewObjectImpl getCompletedStatusVO() {
        return (ViewObjectImpl)findViewObject("CompletedStatusVO");
    }

    public String getReferenceByCode(String code) {
        String reference = null;
        ViewObjectImpl refByCode = getReferenceByCode();

        try {
            RowIterator rowIter =
                refByCode.findByAltKey("RefCodeAltKey", new Key(new Object[] { code }),
                                       -1, Boolean.TRUE);
            if (rowIter.hasNext()) {
                Row referenceRow = rowIter.next();
                reference =
                        (String)referenceRow.getAttribute("ReferenceDescription");

            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return reference;
    }

    /**
     * Container's getter for ReferenceByCode.
     * @return ReferenceByCode
     */
    public ApsReferenceViewImpl getReferenceByCode() {
        return (ApsReferenceViewImpl)findViewObject("ReferenceByCode");
    }

    public void cloneRequest(String requestId) {


        Key reqIdKey = new Key(new Object[] { requestId });
        ViewObject requestVO = getRequestsView();
        SequenceImpl seq = new SequenceImpl("REQUEST_SEQ", getDBTransaction());
        Number reqNo = seq.getSequenceNumber();
        Row currentRequestRow = requestVO.findByKey(reqIdKey, 1)[0];

        AttributeListImpl attrList = new AttributeListImpl();
        String[] attrNames = currentRequestRow.getAttributeNames();
        for (String attrName : attrNames) {
            attrList.setAttribute(attrName,
                                  currentRequestRow.getAttribute(attrName));
        }
        String originalCenterItemNo =
            (String)currentRequestRow.getAttribute("CtrLnItmNo");
        int dashLastIndex = originalCenterItemNo.lastIndexOf("-");
        String newCenterLine =
            originalCenterItemNo.substring(0, dashLastIndex) + "-" + reqNo;
        ;
        //        currentRequestRow.setAttribute("RequestId", reqNo);
        //        currentRequestRow.setAttribute("CtrLnItmNo", newCenterLine);
        AdfFacesContext.getCurrentInstance().getPageFlowScope().put("newCenterLine",
                                                                    newCenterLine);
        AdfFacesContext.getCurrentInstance().getPageFlowScope().put("copyReqNo",
                                                                    reqNo);
        ViewObject submittedRequestVO = getSubmittedRequestsView();
        Row cloneRow = submittedRequestVO.createAndInitRow(attrList);
        cloneRow = currentRequestRow;
        Key newReqIdKey = new Key(new Object[] { reqNo });
        Row clonedRowRequestRow = requestVO.findByKey(newReqIdKey, 1)[0];
        System.err.println(clonedRowRequestRow.getAttribute("RequestId"));
        submittedRequestVO.insertRow(clonedRowRequestRow);


        submittedRequestVO.setCurrentRow(clonedRowRequestRow);


        RowIterator existingPOCIter =
            (RowIterator)currentRequestRow.getAttribute("PointOfContactView");
        Row[] rows = existingPOCIter.getAllRowsInRange();

        //RowIterator pointOfContactIter = (RowIterator)clonedRowRequestRow.getAttribute("PointOfContactView");
        //        if (rows.length > 0){
        //        for (Row row:rows){
        //            AttributeListImpl attrPocList = new AttributeListImpl();
        //            String[] pocAttrnames = row.getAttributeNames();
        //
        //            for(String attrName : pocAttrnames){
        //
        //                attrPocList.setAttribute(attrName, row.getAttribute(attrName));
        //                //Row newPOCRow = pointOfContactIter.createRow();
        //            }
        //            Row newPOCRow = getPointOfContactView().createAndInitRow(attrPocList);
        //            getPointOfContactView().insertRow(newPOCRow);
        //            getPointOfContactView().setCurrentRow(newPOCRow);
        //        }
        //        }else{
        ViewObjectImpl contactView = getPointOfContactView();
        Row newBlankPOCRow = contactView.createRow();
        contactView.insertRow(newBlankPOCRow);
        contactView.setCurrentRow(newBlankPOCRow);
        //        }

        //submittedRequestVO.setCurrentRowAtRangeIndex(0);
        //
        //
        //        cloneRow.setAttribute("CtrLnItmNo", newCenterLine);
        //        cloneRow.setAttribute("RequestId", reqNo);

        //submittedRequestVO.setCurrentRow(cloneRow);


    }

    /**
     * Container's getter for SLAAdminVO.
     * @return SLAAdminVO
     */
    public ApsReferenceViewImpl getSLAAdminVO() {
        return (ApsReferenceViewImpl)findViewObject("SLAAdminVO");
    }

    /**
     * Container's getter for CutOffDateVO.
     * @return CutOffDateVO
     */
    public ApsReferenceViewImpl getCutOffDateVO() {
        return (ApsReferenceViewImpl)findViewObject("CutOffDateVO");
    }

    /**
     * Container's getter for AapSlaCutoffdateVO.
     * @return AapSlaCutoffdateVO
     */
    public ViewObjectImpl getAapSlaCutoffdateVO() {
        return (ViewObjectImpl)findViewObject("AapSlaCutoffdateVO");
    }

    /**
     * Container's getter for AapEmployeeView.
     * @return AapEmployeeView
     */
    public ViewObjectImpl getAapEmployeeView() {
        return (ViewObjectImpl)findViewObject("AapEmployeeView");
    }

    /**
     * Container's getter for FdaCanROVO.
     * @return FdaCanROVO
     */
    public ViewObjectImpl getFdaCanROVO() {
        return (ViewObjectImpl)findViewObject("FdaCanROVO");
    }

    //    public void navigateToRequestDetail(String requestId){
    //        ViewObject requestVO = getSubmittedRequestsView();
    //        Key newReqIdKey = new Key(new Object[] { requestId });
    //        Row clonedRowRequestRow = requestVO.findByKey(newReqIdKey, 1)[0];
    //        requestVO.setCurrentRow(clonedRowRequestRow);
    //    }

    public void navigateToRequestDetail(String centerLineItemNo) {
        ViewObject requestVO = getSubmittedRequestsView();
        requestVO.clearCache();
        RowIterator rowIter =
            requestVO.findByAltKey("CenterLnAltKey", new Key(new Object[] { centerLineItemNo }),
                                   1, Boolean.TRUE);

        if (rowIter.hasNext()) {
            Row currentRow = rowIter.next();
            requestVO.setCurrentRow(currentRow);
        }
        //        Key newReqIdKey = new Key(new Object[] { requestId });
        //        Row clonedRowRequestRow = requestVO.findByKey(newReqIdKey, 1)[0];
        //        requestVO.setCurrentRow(clonedRowRequestRow);
    }

    public void addCommodityType() {
        //ViewObject
    }

    /**
     * Container's getter for CommodityTypeVO.
     * @return CommodityTypeVO
     */
    public ApsReferenceViewImpl getCommodityTypeVO() {
        return (ApsReferenceViewImpl)findViewObject("CommodityTypeVO");
    }

    /**
     * Container's getter for ActionTypeVO.
     * @return ActionTypeVO
     */
    public ApsReferenceViewImpl getActionTypeVO() {
        return (ApsReferenceViewImpl)findViewObject("ActionTypeVO");
    }

    /**
     * Container's getter for NAICSVO.
     * @return NAICSVO
     */
    public ApsReferenceViewImpl getNAICSVO() {
        return (ApsReferenceViewImpl)findViewObject("NAICSVO");
    }

    /**
     * Container's getter for GrantsCommodityVO.
     * @return GrantsCommodityVO
     */
    public ApsReferenceViewImpl getGrantsCommodityVO() {
        return (ApsReferenceViewImpl)findViewObject("GrantsCommodityVO");
    }

    /**
     * Container's getter for AapSlaCutoffdateVO1.
     * @return AapSlaCutoffdateVO1
     */
    public AapSlaCutoffdateVOImpl getAapSlaCutoffdateVO1() {
        return (AapSlaCutoffdateVOImpl)findViewObject("AapSlaCutoffdateVO1");
    }

    /**
     * Container's getter for ReferenceToSLALink1.
     * @return ReferenceToSLALink1
     */
    public ViewLinkImpl getReferenceToSLALink1() {
        return (ViewLinkImpl)findViewLink("ReferenceToSLALink1");
    }

    public void addSLA(String description, String slaDays,
                       oracle.jbo.domain.Date cutoffDate) {

        ViewObject referenceVO = getApsReferenceView();
        Row newRefeRow = referenceVO.getCurrentRow();
        newRefeRow.setAttribute("ReferenceDescription", description);
        newRefeRow.setAttribute("ReferenceType", "AAT");
        newRefeRow.setAttribute("ReferenceCode",
                                "AAT" + newRefeRow.getAttribute("ReferenceId"));

        //        referenceVO.insertRow(newRefeRow);
        //        referenceVO.setCurrentRow(newRefeRow);

        ViewObject slaCutOffVO = getAapSlaCutoffdateVO1();
        Row newSlaRow = slaCutOffVO.getCurrentRow();
        newSlaRow.setAttribute("ActionType", description);
        newSlaRow.setAttribute("SlaDays", slaDays);
        newSlaRow.setAttribute("CutOffDate", cutoffDate);
        newSlaRow.setAttribute("ActionTypeRef",
                               newRefeRow.getAttribute("ReferenceId"));
        //        slaCutOffVO.insertRow(newSlaRow);
        //        slaCutOffVO.setCurrentRow(newSlaRow);
        getAapSlaCutoffdateVO().executeQuery();


    }

    /**
     * Container's getter for InProgressView.
     * @return InProgressView
     */
    public ViewObjectImpl getInProgressView() {
        return (ViewObjectImpl)findViewObject("InProgressView");
    }


    /**
     * Container's getter for AapCollaborationView.
     * @return AapCollaborationView
     */
    public ViewObjectImpl getAapCollaborationView() {
        return (ViewObjectImpl)findViewObject("AapCollaborationView");
    }

    /**
     * Container's getter for RequestToCollaborationViewLink.
     * @return RequestToCollaborationViewLink
     */
    public ViewLinkImpl getRequestToCollaborationViewLink() {
        return (ViewLinkImpl)findViewLink("RequestToCollaborationViewLink");
    }

    /**
     * Container's getter for CollaborationReference.
     * @return CollaborationReference
     */
    public ApsReferenceViewImpl getCollaborationReference() {
        return (ApsReferenceViewImpl)findViewObject("CollaborationReference");
    }

    public void filterCanSearch(String center, String requestId) {
        ViewObjectImpl cansearch = getFdaCanROVO();
        List<String> collabList = getCollaborationListDesc(requestId);
        ViewCriteria byCenter = cansearch.createViewCriteria();
        ViewCriteriaRow byCenterRow = byCenter.createViewCriteriaRow();
        ViewCriteriaItem byCenterItem =
            byCenterRow.ensureCriteriaItem("Center");
        byCenterItem.setOperator(JboCompOper.OPER_IN);
        byCenterItem.setValueMinCardinality(1);
        byCenterItem.setValueMaxCardinality(1);
        int idx = 0;
        byCenterItem.setValue(idx, ADFUtils.deriveCenterFromRole());

//        for (String collab : collabList) {
//            idx = idx + 1;
//            byCenterItem.setValue(idx, collab);
//        }

        byCenter.addRow(byCenterRow);
        cansearch.applyViewCriteria(byCenter);
        //cansearch.setNamedWhereClauseParam("bind_Center", center);
        //cansearch.executeQuery();

    }

    /**
     * Container's getter for CommentsVO.
     * @return CommentsVO
     */
    public ViewObjectImpl getCommentsVO() {
        return (ViewObjectImpl)findViewObject("CommentsVO");
    }

    /**
     * Container's getter for RequestToCommentsViewLink1.
     * @return RequestToCommentsViewLink1
     */
    public ViewLinkImpl getRequestToCommentsViewLink1() {
        return (ViewLinkImpl)findViewLink("RequestToCommentsViewLink1");
    }

    /**
     * Container's getter for MassCommentsVO.
     * @return MassCommentsVO
     */
    public ViewObjectImpl getMassCommentsVO() {
        return (ViewObjectImpl)findViewObject("MassCommentsVO");
    }

    /**
     * Container's getter for PotentialContractTypeVO.
     * @return PotentialContractTypeVO
     */
    public ApsReferenceViewImpl getPotentialContractTypeVO() {
        return (ApsReferenceViewImpl)findViewObject("PotentialContractTypeVO");
    }

    /**
     * Container's getter for ProductServiceCodeVO.
     * @return ProductServiceCodeVO
     */
    public ApsReferenceViewImpl getProductServiceCodeVO() {
        return (ApsReferenceViewImpl)findViewObject("ProductServiceCodeVO");
    }

    /**
     * Container's getter for RequirementType.
     * @return RequirementType
     */
    public ApsReferenceViewImpl getRequirementType() {
        return (ApsReferenceViewImpl)findViewObject("RequirementType");
    }

    /**
     * Container's getter for CommodityType.
     * @return CommodityType
     */
    public ApsReferenceViewImpl getCommodityType() {
        return (ApsReferenceViewImpl)findViewObject("CommodityType");
    }

    public void insertNewComment() {
        Row newCommentRow = getCommentsVO().createRow();
        getCommentsVO().insertRow(newCommentRow);
        getCommentsVO().setCurrentRow(newCommentRow);
    }

    public List<Number> getCollaborationList(String requestId) {
        List<Number> centerId = new ArrayList<Number>();
        ViewObjectImpl collabView = getCollabByRequest();
        ViewCriteria byRequestId = collabView.getViewCriteria("byRequestId");
        collabView.setNamedWhereClauseParam("bind_RequestId", requestId);

        collabView.applyViewCriteria(byRequestId);
        // collabView.executeQuery();
        while (collabView.hasNext()) {
            Row row = collabView.next();
            centerId.add((Number)row.getAttribute("CenterId"));
        }


        return centerId;

    }

    /**
     * Container's getter for CollabByRequest.
     * @return CollabByRequest
     */
    public ViewObjectImpl getCollabByRequest() {
        return (ViewObjectImpl)findViewObject("CollabByRequest");
    }

    private List<String> getCollaborationListDesc(String requestId) {
        List<String> centerId = new ArrayList<String>();
        ViewObjectImpl collabView = getCollabByRequest();
        ViewCriteria byRequestId = collabView.getViewCriteria("byRequestId");
        collabView.setNamedWhereClauseParam("bind_RequestId", requestId);

        collabView.applyViewCriteria(byRequestId);
        // collabView.executeQuery();
        while (collabView.hasNext()) {
            Row row = collabView.next();
            centerId.add((String)row.getAttribute("ReferenceDescription"));
        }


        return centerId;

    }


    /**
     * Container's getter for MassApprovalQuery.
     * @return MassApprovalQuery
     */
    public ViewObjectImpl getMassApprovalQuery() {
        return (ViewObjectImpl)findViewObject("MassApprovalQuery");
    }

    public void initializeMassApprovalRejection() {

        ViewObjectImpl aapNotificationVO = getMassApprovalRequestsVO();
        SecurityContext context = ADFContext.getCurrent().getSecurityContext();
        List<String> wfStatusList = new ArrayList<String>();

        ViewCriteria byCenterWFStatus = aapNotificationVO.createViewCriteria();
        ViewCriteriaRow byCenterWFStatusRow =
            byCenterWFStatus.createViewCriteriaRow();

        ViewCriteriaItem byCenterItem =
            byCenterWFStatusRow.ensureCriteriaItem("WfStatus");
        byCenterItem.setOperator(JboCompOper.OPER_IN);
        if (context.isUserInRole("AAPACQNAPPROVE")) {
            wfStatusList.add("SUBMITTED");
        }

        if (context.isUserInRole("AAPBUDGETAPPROVE")) {
            wfStatusList.add("BUDGET_USER_SUBMITTED");
        }
        byCenterItem.setValueMinCardinality(wfStatusList.size());
        byCenterItem.setValueMaxCardinality(wfStatusList.size());
        int idx = 0;
        //        byCenterItem.setValue(idx, center);
        //
        for (String status : wfStatusList) {

            byCenterItem.setValue(idx, status);
            idx = idx + 1;
        }
        ViewCriteriaRow byCenterRow = byCenterWFStatus.createViewCriteriaRow();
        byCenterRow.setAttribute("CenterId",
                                 AAPModelUtils.getCenterFromRole());
        //        ViewCriteriaItem centerItem = byCenterRow.ensureCriteriaItem("CenterId");
        //        centerItem.setOperator(JboCompOper.OPER_EQ);
        //centerItem.setValue(AAPModelUtils.getCenterFromRole());

        byCenterWFStatusRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        byCenterWFStatus.addRow(byCenterWFStatusRow);
        byCenterRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        byCenterWFStatus.addRow(byCenterRow);
        aapNotificationVO.applyViewCriteria(byCenterWFStatus);
        aapNotificationVO.executeQuery();

        //            ViewObjectImpl massApprovalVO = getAapNotificationVO();
        //            ViewCriteria massCriteria = massApprovalVO.getViewCriteria("MassApprovalCriteria");
        //            massApprovalVO.applyViewCriteria(massCriteria);
        //            massApprovalVO.setNamedWhereClauseParam("bind_Center", AAPModelUtils.getCenterFromRole());
        //            massApprovalVO.executeQuery();
    }

    private List<String> getPOCEmail(String requestId) {

        //            List<Number> centerId = new ArrayList<Number>();
        //            ViewObjectImpl collabView = getCollabByRequest();
        //            ViewCriteria byRequestId = collabView.getViewCriteria("byRequestId");
        //            collabView.setNamedWhereClauseParam("bind_RequestId", requestId);
        //
        //            collabView.applyViewCriteria(byRequestId);
        //            // collabView.executeQuery();
        //            while (collabView.hasNext()){
        //                Row row = collabView.next();
        //                centerId.add((Number)row.getAttribute("CenterId"));
        //            }
        //
        //
        //            return centerId;


        ViewObjectImpl pocVO = getPOCView();
        ViewCriteria byRequestId = pocVO.getViewCriteria("ByRequestId");
        pocVO.setNamedWhereClauseParam("bind_RequestId", requestId);
        pocVO.applyViewCriteria(byRequestId);
        pocVO.executeQuery();
        List<String> pocEmail = new ArrayList<String>();
        while (pocVO.hasNext()) {
            Row row = pocVO.next();
            if (row.getAttribute("PocEmail") != null)
                pocEmail.add((String)row.getAttribute("PocEmail"));
        }

        return pocEmail;
    }

    /**
     * Container's getter for POCView.
     * @return POCView
     */
    public ViewObjectImpl getPOCView() {
        return (ViewObjectImpl)findViewObject("POCView");
    }

    /**
     * Container's getter for MassApprovalRequestsVO.
     * @return MassApprovalRequestsVO
     */
    public ViewObjectImpl getMassApprovalRequestsVO() {
        return (ViewObjectImpl)findViewObject("MassApprovalRequestsVO");
    }
    
    private ViewCriteriaRow createCollaborationCriteria(ViewCriteria criteria){
            ViewCriteriaRow criteriaRow = null;
                
       List<Number> requests = new ArrayList<Number>(); 
       ViewObjectImpl searchCollabCenter = getSearchCollabCenterVO(); 
        searchCollabCenter.setNamedWhereClauseParam("bind_Center", AAPModelUtils.getCenterFromRole());
        searchCollabCenter.executeQuery();
        
        
        while(searchCollabCenter.hasNext()){
            Row row = searchCollabCenter.next();
            requests.add((Number)row.getAttribute("RequestId"));    
        }
        if (requests.size() > 0){
            criteriaRow = criteria.createViewCriteriaRow();
            ViewCriteriaItem criteriaRowItem =
                criteriaRow.ensureCriteriaItem("RequestId");
            criteriaRowItem.setOperator(JboCompOper.OPER_IN);
            criteriaRowItem.setValueMaxCardinality(requests.size());    
            criteriaRowItem.setValueMinCardinality(requests.size());
            int idx = 0;
            for (Number requestId:requests){
                criteriaRowItem.setValue(idx, requestId);
                idx = idx +1;
            }
        }
        return criteriaRow;
    }

    /**
     * Container's getter for SearchCollabCenterVO.
     * @return SearchCollabCenterVO
     */
    public ViewObjectImpl getSearchCollabCenterVO() {
        return (ViewObjectImpl)findViewObject("SearchCollabCenterVO");
    }
    
    
}
