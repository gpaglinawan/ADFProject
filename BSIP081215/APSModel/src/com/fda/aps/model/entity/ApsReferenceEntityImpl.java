package com.fda.aps.model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jul 26 12:39:00 EDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ApsReferenceEntityImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ReferenceId {
            public Object get(ApsReferenceEntityImpl obj) {
                return obj.getReferenceId();
            }

            public void put(ApsReferenceEntityImpl obj, Object value) {
                obj.setReferenceId((Number)value);
            }
        }
        ,
        ReferenceCode {
            public Object get(ApsReferenceEntityImpl obj) {
                return obj.getReferenceCode();
            }

            public void put(ApsReferenceEntityImpl obj, Object value) {
                obj.setReferenceCode((String)value);
            }
        }
        ,
        ReferenceDescription {
            public Object get(ApsReferenceEntityImpl obj) {
                return obj.getReferenceDescription();
            }

            public void put(ApsReferenceEntityImpl obj, Object value) {
                obj.setReferenceDescription((String)value);
            }
        }
        ,
        ReferenceType {
            public Object get(ApsReferenceEntityImpl obj) {
                return obj.getReferenceType();
            }

            public void put(ApsReferenceEntityImpl obj, Object value) {
                obj.setReferenceType((String)value);
            }
        }
        ,
        EffectiveFg {
            public Object get(ApsReferenceEntityImpl obj) {
                return obj.getEffectiveFg();
            }

            public void put(ApsReferenceEntityImpl obj, Object value) {
                obj.setEffectiveFg((String)value);
            }
        }
        ,
        EffectiveEndDate {
            public Object get(ApsReferenceEntityImpl obj) {
                return obj.getEffectiveEndDate();
            }

            public void put(ApsReferenceEntityImpl obj, Object value) {
                obj.setEffectiveEndDate((Date)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ApsReferenceEntityImpl object);

        public abstract void put(ApsReferenceEntityImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int REFERENCEID = AttributesEnum.ReferenceId.index();
    public static final int REFERENCECODE = AttributesEnum.ReferenceCode.index();
    public static final int REFERENCEDESCRIPTION = AttributesEnum.ReferenceDescription.index();
    public static final int REFERENCETYPE = AttributesEnum.ReferenceType.index();
    public static final int EFFECTIVEFG = AttributesEnum.EffectiveFg.index();
    public static final int EFFECTIVEENDDATE = AttributesEnum.EffectiveEndDate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ApsReferenceEntityImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.fda.aps.model.entity.ApsReferenceEntity");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for ReferenceId, using the alias name ReferenceId.
     * @return the ReferenceId
     */
    public Number getReferenceId() {
        return (Number)getAttributeInternal(REFERENCEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferenceId.
     * @param value value to set the ReferenceId
     */
    public void setReferenceId(Number value) {
        setAttributeInternal(REFERENCEID, value);
    }

    /**
     * Gets the attribute value for ReferenceCode, using the alias name ReferenceCode.
     * @return the ReferenceCode
     */
    public String getReferenceCode() {
        return (String)getAttributeInternal(REFERENCECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferenceCode.
     * @param value value to set the ReferenceCode
     */
    public void setReferenceCode(String value) {
        setAttributeInternal(REFERENCECODE, value);
    }

    /**
     * Gets the attribute value for ReferenceDescription, using the alias name ReferenceDescription.
     * @return the ReferenceDescription
     */
    public String getReferenceDescription() {
        return (String)getAttributeInternal(REFERENCEDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferenceDescription.
     * @param value value to set the ReferenceDescription
     */
    public void setReferenceDescription(String value) {
        setAttributeInternal(REFERENCEDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ReferenceType, using the alias name ReferenceType.
     * @return the ReferenceType
     */
    public String getReferenceType() {
        return (String)getAttributeInternal(REFERENCETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferenceType.
     * @param value value to set the ReferenceType
     */
    public void setReferenceType(String value) {
        setAttributeInternal(REFERENCETYPE, value);
    }

    /**
     * Gets the attribute value for EffectiveFg, using the alias name EffectiveFg.
     * @return the EffectiveFg
     */
    public String getEffectiveFg() {
        return (String)getAttributeInternal(EFFECTIVEFG);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveFg.
     * @param value value to set the EffectiveFg
     */
    public void setEffectiveFg(String value) {
        setAttributeInternal(EFFECTIVEFG, value);
    }

    /**
     * Gets the attribute value for EffectiveEndDate, using the alias name EffectiveEndDate.
     * @return the EffectiveEndDate
     */
    public Date getEffectiveEndDate() {
        return (Date)getAttributeInternal(EFFECTIVEENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveEndDate.
     * @param value value to set the EffectiveEndDate
     */
    public void setEffectiveEndDate(Date value) {
        setAttributeInternal(EFFECTIVEENDDATE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param referenceId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number referenceId) {
        return new Key(new Object[]{referenceId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        SequenceImpl seq = new SequenceImpl("REF_SEQ", getDBTransaction());
        Number refNo = seq.getSequenceNumber();
        setReferenceId(refNo);
        super.create(attributeList);
    }
}
