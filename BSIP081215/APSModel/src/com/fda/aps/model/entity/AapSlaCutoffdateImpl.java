package com.fda.aps.model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jul 25 18:14:59 EDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AapSlaCutoffdateImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(AapSlaCutoffdateImpl obj) {
                return obj.getId();
            }

            public void put(AapSlaCutoffdateImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        ActionType {
            public Object get(AapSlaCutoffdateImpl obj) {
                return obj.getActionType();
            }

            public void put(AapSlaCutoffdateImpl obj, Object value) {
                obj.setActionType((String)value);
            }
        }
        ,
        SlaDays {
            public Object get(AapSlaCutoffdateImpl obj) {
                return obj.getSlaDays();
            }

            public void put(AapSlaCutoffdateImpl obj, Object value) {
                obj.setSlaDays((Number)value);
            }
        }
        ,
        CutOffDate {
            public Object get(AapSlaCutoffdateImpl obj) {
                return obj.getCutOffDate();
            }

            public void put(AapSlaCutoffdateImpl obj, Object value) {
                obj.setCutOffDate((Date)value);
            }
        }
        ,
        ActionTypeRef {
            public Object get(AapSlaCutoffdateImpl obj) {
                return obj.getActionTypeRef();
            }

            public void put(AapSlaCutoffdateImpl obj, Object value) {
                obj.setActionTypeRef((Number)value);
            }
        }
        ,
        Type {
            public Object get(AapSlaCutoffdateImpl obj) {
                return obj.getType();
            }

            public void put(AapSlaCutoffdateImpl obj, Object value) {
                obj.setType((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(AapSlaCutoffdateImpl object);

        public abstract void put(AapSlaCutoffdateImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int ACTIONTYPE = AttributesEnum.ActionType.index();
    public static final int SLADAYS = AttributesEnum.SlaDays.index();
    public static final int CUTOFFDATE = AttributesEnum.CutOffDate.index();
    public static final int ACTIONTYPEREF = AttributesEnum.ActionTypeRef.index();
    public static final int TYPE = AttributesEnum.Type.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AapSlaCutoffdateImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.fda.aps.model.entity.AapSlaCutoffdate");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for ActionType, using the alias name ActionType.
     * @return the ActionType
     */
    public String getActionType() {
        return (String)getAttributeInternal(ACTIONTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActionType.
     * @param value value to set the ActionType
     */
    public void setActionType(String value) {
        setAttributeInternal(ACTIONTYPE, value);
    }

    /**
     * Gets the attribute value for SlaDays, using the alias name SlaDays.
     * @return the SlaDays
     */
    public Number getSlaDays() {
        return (Number)getAttributeInternal(SLADAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlaDays.
     * @param value value to set the SlaDays
     */
    public void setSlaDays(Number value) {
        setAttributeInternal(SLADAYS, value);
    }

    /**
     * Gets the attribute value for CutOffDate, using the alias name CutOffDate.
     * @return the CutOffDate
     */
    public Date getCutOffDate() {
        return (Date)getAttributeInternal(CUTOFFDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CutOffDate.
     * @param value value to set the CutOffDate
     */
    public void setCutOffDate(Date value) {
        setAttributeInternal(CUTOFFDATE, value);
    }

    /**
     * Gets the attribute value for ActionTypeRef, using the alias name ActionTypeRef.
     * @return the ActionTypeRef
     */
    public Number getActionTypeRef() {
        return (Number)getAttributeInternal(ACTIONTYPEREF);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActionTypeRef.
     * @param value value to set the ActionTypeRef
     */
    public void setActionTypeRef(Number value) {
        setAttributeInternal(ACTIONTYPEREF, value);
    }

    /**
     * Gets the attribute value for Type, using the alias name Type.
     * @return the Type
     */
    public String getType() {
        return (String)getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Type.
     * @param value value to set the Type
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        
        SequenceImpl seq = new SequenceImpl("SLA_SEQ", getDBTransaction());
        Number slaId = seq.getSequenceNumber();
        setId(slaId);

        super.create(attributeList);
    }
}
